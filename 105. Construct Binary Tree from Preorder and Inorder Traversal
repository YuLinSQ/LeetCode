# myown, neetcode, gpt solution...
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def buildTree(self, preorder, inorder):
        if not preorder:
            return None

        # Value -> index in inorder
        hm = {val: idx for idx, val in enumerate(inorder)}
        preorder_index = [0]  # mutable reference

        def rec(left, right):
            if left > right:
                return None

            root_val = preorder[preorder_index[0]]
            preorder_index[0] += 1

            root = TreeNode(root_val)
            inorder_index = hm[root_val]

            root.left = rec(left, inorder_index - 1)
            root.right = rec(inorder_index + 1, right)

            return root

        return rec(0, len(inorder) - 1)
