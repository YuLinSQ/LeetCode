"""
# Definition for a Node.
class Node(object):
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution(object):
    def cloneGraph(self, node):
        """
        :type node: Node
        :rtype: Node
        """
        visit = {}
        def clone(node):
            if not node:
                return None
            if node.val in visit:
                return visit[node.val]
            copy = Node(node.val)
            visit[node.val] = copy
            for i in node.neighbors:
                copy.neighbors.append(clone(i))
            return copy
        return clone(node)

