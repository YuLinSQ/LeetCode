/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

// struct Stack{
//     ListNode *top;
//     Stack() : top*next=nullptr {}
//     Stack(int x) : ListNode(int x) {}
//     Stack(int x, ListNode *add) : ListNode(int x, ListNode *next) {}
//     void push(ListNode *add)
//     {
//         add.next=&top;
//         *top=add;
//     }
//     int pop()
//     {
//         int value=top.val;
//         top=*(top.next);
//         return value;
//     }
// };

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode* temp1=head;
        int count=0;
        while(temp1->next!=nullptr)
        {
            count++;
            temp1=temp1->next;
        }
        count++;
        temp1=head;
        ListNode* prev=nullptr;
        ListNode* temp2=head;
        count=count/2;
        for(int i=0; i<count; i++)
        {
            temp1=temp1->next;
        }
        while(temp1!=nullptr)
        {
            temp2=temp1->next;
            temp1->next=prev;
            prev=temp1;
            temp1=temp2;
        }
        temp1=head;
        temp2=prev;
        while(temp2!=nullptr)
        {
            // cout<<"hello";
            if((temp1->val)!=(temp2->val))
            {
                return false;
            }
            temp1=temp1->next;
            temp2=temp2->next;
        }
        return true;
    }
};
 
