class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        hashmap = {}
        for i in range(len(nums)):
            if nums[i] in hashmap:
                hashmap[nums[i]]+=1
            else:
                hashmap[nums[i]] = 1
        min_heap = []  # Min-heap to store (value, key) tuples
        for key, value in hashmap.items():
            if len(min_heap) < k:
                heapq.heappush(min_heap, (value, key))  # Push (value, key)
            else:
                # If the new value is greater than the smallest in heap, replace it
                if value > min_heap[0][0]:
                    heapq.heappushpop(min_heap, (value, key))

        # Extract the top k keys from the heap
        return [key for _, key in min_heap]
