class Solution(object):
    def networkDelayTime(self, times, n, k):
        """
        :type times: List[List[int]]
        :type n: int
        :type k: int
        :rtype: int
        """
        hm = {}
        visited = [float('inf')]*(n+1)
        visited[k] = 0
        done = set()
        for i in range(n+1):
            hm[i] = []
        for i in range(len(times)):
            hm[times[i][0]].append([times[i][1], times[i][2]])

        def dfs(time, node):
            if node in done:
                return
            done.add(node)
            for i,j in hm[node]:
                temp = time+j
                if temp < visited[i]:
                    visited[i] = temp
                    if i in done:
                        done.remove(i)
                dfs(temp, i)
            
        dfs(0,k)
        ans = 0
        for i in range (1, len(visited)):
            if visited[i] == float('inf'):
                return -1
            if visited[i]>ans:
                ans = visited[i]
        return ans
